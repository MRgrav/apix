// public function createOrder(Request $request, $courseId)
// {
//     $course = Course::findOrFail($courseId);
=======
public function createOrder(Request $request, $courseId)
{
    $course = Course::findOrFail($courseId);
    $user = auth()->user(); // Get the authenticated user


    if ($user->is_nri) {
        $currency = 'USD';
        $price = $course->price_in_usd;
    } else {
        $currency = 'INR';
        $price = $course->price;
    }


    $amount = $price * 100;

>>>>>>> upstream/main

//     $razorpay = new \Razorpay\Api\Api(env('RAZORPAY_KEY'), env('RAZORPAY_SECRET'));

<<<<<<< HEAD
//     $order = $razorpay->order->create([
//         'receipt' => 'rcpt_' . auth()->id(),
//         'amount' => $course->price * 100, // Razorpay expects amount in paise
//         'currency' => 'INR',
//         'payment_capture' => 1 // Auto-capture
//     ]);

//     return response()->json(['order_id' => $order['id'], 'amount' => $course->price, 'currency' => 'INR'], 200);
// }
=======
    $order = $razorpay->order->create([
        'receipt' => 'rcpt_' . auth()->id(),
        'amount' => $amount, // Amount in smallest unit
        'currency' => $currency,
        'payment_capture' => 1 // Auto-capture
    ]);

    return response()->json([
        'order_id' => $order['id'],
        'amount' => $price,
        'currency' => $currency
    ], 200);
}

public function confirmPayment(Request $request)
{
    // Log the incoming request data
    Log::info('Incoming payment request', $request->all());
>>>>>>> upstream/main

    /**
     * Create an order for the course
     *
     * @param  Request  $request
     * @param  int  $courseId
     * @return \Illuminate\Http\JsonResponse
     */
    public function createOrder(Request $request, $courseId)
    {
        try {
            // Fetch the course details
            $course = Course::findOrFail($courseId);

            // Initialize Razorpay API
            $razorpay = new Api(env('RAZORPAY_KEY'), env('RAZORPAY_SECRET'));

            // Create an order for the course
            $order = $razorpay->order->create([
                'receipt' => 'rcpt_' . Auth::id(),
                'amount' => $course->price * 100, // Razorpay expects amount in paise
                'currency' => 'INR',
                'payment_capture' => 1, // Auto-capture
            ]);

            // Return the order details
            return response()->json([
                'order_id' => $order['id'],
                'amount' => $course->price,
                'currency' => 'INR',
            ], 200);

        } catch (\Exception $e) {
            Log::error('Razorpay Order Creation Failed: ' . $e->getMessage());
            return response()->json(['message' => 'Failed to create order'], 500);
        }
    }














    public function store(Request $request)
    {
        try {
            $validatedData = $request->validate([
                'group_id' => 'required',
                'course_id' => 'required|exists:courses,id',
                'photo' => 'nullable|file|mimes:jpeg,png,jpg|max:2048',
                'pdf' => 'nullable|file|mimes:pdf',
                'audio' => 'nullable|file|mimes:mp3,wav',
            ]);

            $studyMaterial = new StudyMaterial();
            $studyMaterial->group_id = $validatedData['group_id'];
            $studyMaterial->course_id = $validatedData['course_id'];

            if ($request->hasFile('photo')) {
                $file = $request->file('photo');
                $filename = time() . '_' . $file->getClientOriginalName();
                // $studyMaterial->photo = $file->storeAs('photos', $filename, 'public');
                $studyMaterial->photo = Storage::disk('minio')->put('photos/'.$filename ,$request->file('photo'));
            }
            
            if ($request->hasFile('pdf')) {
                $file = $request->file('pdf');
                $filename = time() . '_' . $file->getClientOriginalName();
                $studyMaterial->pdf = $file->storeAs('pdfs', $filename, 'public');
            }
            
            if ($request->hasFile('audio')) {
                $file = $request->file('audio');
                $filename = time() . '_' . $file->getClientOriginalName();
                $studyMaterial->audio = $file->storeAs('audios', $filename, 'public');
            }            

            $studyMaterial->save();

            Log::info('Study material created successfully', [
                'group_id' => $studyMaterial->group_id,
                'course_id' => $studyMaterial->course_id,
            ]);

            $key = 'group_materials' . $validatedData['group_id'];

            Cache::forget($key);

            return response()->json(['message' => 'Study material created successfully'], 201);
        } catch (ValidationException $e) {
            // Handle validation exceptions
            Log::error('Validation error while creating study material', [
                'errors' => $e->validator->errors(),
                'request_data' => $request->all(),
            ]);
            return response()->json(['errors' => $e->validator->errors()], 422);
        } catch (\Exception $e) {
            // Handle other exceptions
            Log::error('An error occurred while creating study material', [
                'error' => $e->getMessage(),
                'request_data' => $request->all(),
            ]);
            return response()->json(['message' => 'An error occurred while creating study material', 'error' => $e->getMessage()], 500);
        }
    }